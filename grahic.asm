section .data
    fmt db "%.2f", 10, 0  ; формат для вывода числа с плавающей точкой
    two dq 2.0
    neg_two dq -2.0
    neg_half dq -0.5
    three dq 3.0
    four dq 4.0
    neg4 dq -4.0
    neg6 dq -6.0
    neg8 dq -8.0

section .bss
    num resb 20           ; резервируем 20 байт для ввода числа
    result resq 1         ; резервируем 8 байт для результата

section .text
    extern printf
    global main

main:
    ; Читаем число с консоли
    mov eax, 3             ; syscall: sys_read
    mov ebx, 0             ; файл: stdin
    mov ecx, num           ; буфер для хранения числа
    mov edx, 20            ; максимальное количество байт для чтения
    int 0x80               ; вызов ядра

    ; Преобразуем строку в число с плавающей точкой (нужна библиотека или своя логика)

    ; Здесь должен быть код для парсинга строки num в число с плавающей точкой
    ; Для простоты мы ожидаем, что пользователь вводит корректное значение.

    ; Простая обработка - предположим, что вводимых данных достаточно
    ; и мы их просто сохраняем в той же переменной как десятичное число.
    ; Следует использовать специализированные функции для преобразования.

    ; (ваша логика обработки переменной num здесь...)

    ; Определяем диапазон и вычисляем y
    ; предположим, что вы сделали парсинг
    ; и у вас есть корректно загруженное число в регистре x (например, через fild)

    ; загружаем через fild (вставьте число здесь, используя правильную вставку)
    ; fild qword [num]   
    ; Пример на случай, если у вас есть только одна интерпретация (например, как фиксированное значение)
    fld qword [two]  ; Использовать просто как пример

    ; Анализируем ваше значение y...

    ; После расчетов
    fstp qword [result]  ; сохраняем результат в памяти

    ; Выводим результат
    mov rdi, fmt          ; формат
    mov rsi, [result]     ; передаем результат
    call printf           ; печатаем результат

    ; Завершаем программу
    mov eax, 1            ; syscall: sys_exit
    xor ebx, ebx          ; код завершения: 0
    int 0x80              ; вызов ядра
